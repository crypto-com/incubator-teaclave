// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

#![cfg_attr(feature = "mesalock_sgx", no_std)]
#[cfg(feature = "mesalock_sgx")]
#[macro_use]
extern crate sgx_tstd as std;

use serde::{Deserialize, Serialize};
use std::prelude::v1::*;
use std::sync::Arc;

/// Errors that can happen during attestation and verification process
#[derive(thiserror::Error, Debug)]
pub enum AttestationError {
    #[error("OCall error")]
    OCallError(sgx_types::sgx_status_t),
    #[error("Attestation Service error")]
    AttestationServiceError,
    #[error("Platform error")]
    PlatformError(sgx_types::sgx_status_t),
    #[error("Report error")]
    ReportError,
    #[error("Report error")]
    ConnectionError,
}

/// Attestation Configuration
#[derive(Clone)]
pub enum AttestationConfig {
    /// Trust enclave without attestation
    NoAttestation,
    /// Perform attestation before trusting enclave
    WithAttestation(AttestationServiceConfig),
}

/// Attestation algorithms
#[derive(Clone)]
pub(crate) enum AttestationAlgorithm {
    /// Use Intel EPID
    SgxEpid,
    /// Use ECDSA
    SgxEcdsa,
}

impl AttestationAlgorithm {
    // TODO: `impl FromStr for AttestationAlgorithm`?
    pub(crate) fn from_str(s: &str) -> Option<Self> {
        match s {
            "sgx_epid" => Some(AttestationAlgorithm::SgxEpid),
            "sgx_ecdsa" => Some(AttestationAlgorithm::SgxEcdsa),
            _ => None,
        }
    }
}

/// Attestation Service Configuration
#[derive(Clone)]
pub struct AttestationServiceConfig {
    /// Algorithm to use
    algo: AttestationAlgorithm,
    /// URL of attestation service
    as_url: url::Url,
    /// API Key
    api_key: String,
    /// SPID (For DCAP based attestation, SPID = 0?)
    spid: sgx_types::sgx_spid_t,
}

impl AttestationConfig {
    /// Creates `AttestationConfig` for no attestation
    pub fn no_attestation() -> Arc<Self> {
        Arc::new(Self::NoAttestation)
    }

    /// Creates `AttestationConfig` for attestation using given values
    pub fn new(algorithm: &str, url: &str, api_key: &str, spid_str: &str) -> Arc<Self> {
        if cfg!(sgx_sim) {
            return Self::no_attestation();
        }

        use core::convert::TryFrom;

        let mut spid = sgx_types::sgx_spid_t::default();
        let hex = hex::decode(spid_str).expect("Illegal SPID provided");
        spid.id = <[u8; 16]>::try_from(hex.as_slice()).expect("Illegal SPID provided");

        let algo = AttestationAlgorithm::from_str(algorithm)
            .unwrap_or_else(|| panic!("Unsupported remote attestation algorithm"));

        let att_service_cfg = AttestationServiceConfig {
            algo,
            as_url: url::Url::parse(url).unwrap(),
            api_key: api_key.to_string(),
            spid,
        };

        Arc::new(Self::WithAttestation(att_service_cfg))
    }
}

// AttestationReport can be endorsed by either the Intel Attestation Service using EPID or Data Center Attestation
// Service (platform dependent) using ECDSA.
#[derive(Default, Serialize, Deserialize)]
pub(crate) struct EndorsedAttestationReport {
    // Attestation report generated by the hardware
    pub report: Vec<u8>,
    // Singature of the report
    pub signature: Vec<u8>,
    // Certificate matching the signing key of the signature
    pub signing_cert: Vec<u8>,
}

/// Configuration for TLS communication in Remote Attestation
#[derive(Debug)]
pub struct AttestedTlsConfig {
    pub cert: Vec<u8>,
    pub private_key: Vec<u8>,
    pub time: std::time::SystemTime,
    pub validity: std::time::Duration,
}

#[macro_use]
mod cert;
pub mod report;
pub mod types;
pub mod verifier;

cfg_if::cfg_if! {
    if #[cfg(feature = "mesalock_sgx")]  {
        mod service;
        mod key;
        mod platform;
        mod attestation;
        pub use attestation::RemoteAttestation;
    }
}

#[cfg(all(feature = "enclave_unit_test", feature = "mesalock_sgx"))]
pub mod tests {
    use super::*;
    use teaclave_test_utils::*;

    pub fn run_tests() -> bool {
        run_tests!(platform::tests::run_tests, report::tests::run_tests)
    }
}
